'git commit -amend' - abre o editor para editar o comentario do commit mais recente

	caso o commit ja tenha sido pushed, ainda é possivel fazer a alteraçao, mas para atualizar
	o remote será necessario inserir um '-f' ao final (-forced) 
	'git push origin master -f' 
	é preciso tomar cuidado (se estiver trabalhando em conjunto) porque isso muda
	o ID do commit e pode causar problemas 

	fonte: https://stackoverflow.com/questions/179123/how-to-modify-existing-unpushed-commits

adicionar deleção de arquivos:
	Deleção de arquivos tambem é uma alteração do repositorio, e aparece no 'git status'
	em vermelho escrito 'deleted'
	-- inserir '-u' ao final do git add, ex.: 'git add -u' isso vai inserir a deleção do arquivo
	talvez 'git add arq_deletado -u' insira a deleção de so um dos arquivos.
	
	fonte: https://stackoverflow.com/questions/4307728/git-still-showing-deleted-files-after-a-commit

Alguns FLAGS (modificacoes de comandos)
git log
git log --oneline
'git log --stat' - mostra os arquivos modificados
'git log -p' - mostra quais foram as alteraçoes (semelhante ao git diff)

git show - mostra o 'git log -p' do ultimo commit
'git show ID-commit - é um git show referente a um commit especifico
		pode ser so os primeiros 7 digitos do ID
'git show --stat' - vai sumir as diferencas para incluir deve-se usar 'git show -stat -p'

REMOVE FROM STAGING AREA
	TIP: Did you also notice the helpful text that's located just beneath 
	"Changes to be committed"? It says (use "git rm --cached <file>..." to unstage) 
	This is a hint of what you should do if you accidentally ran git add and gave it 
	the wrong file.

	As a side note, git rm --cached is not like the shell's rm command. 
	git rm --cached will not destroy any of your work; it just removes it 
	from the Staging Index.

'git add .' - adiciona todos os arquivos do working directory para a Staging area

'git commit -m "your commit message" ' - dessa forma o editor de texto nao vai abrir

GIT IGNORE
	If you want to keep a file in your project's directory structure but 
	make sure it isn't accidentally committed to the project, you can use the 
	specially named file, .gitignore (note the dot at the front, it's important!). 
	Add this file to your project in the same directory that the hidden .git directory 
	is located. All you have to do is list the names of files that you want 
	Git to ignore (not track) and it will ignore them.

	Let's try it with the "project.docx" file. Add the following line 
	inside the .gitignore file:
	project.docx

	Now run git status and check its output:
	"Untracked files: .gitignore"

	Git knows to look at the contents of a file with the name .gitignore. 
	Since it saw "project.docx" in it, it ignored that file and doesn't show 
	it in the output of git status.

GLOBBING CRASH COURSE
	More details in: https://en.wikipedia.org/wiki/Glob_(programming) 

	Let's say that you add 50 images to your project, but want Git to ignore all 
	of them. Does this mean you have to list each and every filename 
	in the .gitignore file? Oh gosh no, that would be crazy! Instead, you can use 
	a concept called globbing.

	Globbing lets you use special characters to match patterns/characters. 
	In the .gitignore file, you can use the following:

	blank lines can be used for spacing
	# - marks line as a comment
	* - matches 0 or more characters
	? - matches 1 character
	[abc] - matches a, b, or c
	** - matches nested directories - a/**/z matches
	a/z
	a/b/z
	a/b/c/z
	So if all of the 50 images are JPEG images in the "samples" folder, 
	we could add the following line to .gitignore to have Git ignore all 50 images.

	samples/*.jpg

GIT TAG
	Pay attention to what's shown (just the SHA and the commit message)

	The command we'll be using to interact with the repository's tags is 
	the git tag command:
	'git tag -a v1.0' - para o commit mais recente
	'git tag -a v1.0 ID-commit' - para um commit especifico, ID-commit pode ser o SHA
					do commit (que sao os primeiros 7 digitos)

	This will open your code editor and wait for you supply a message for the tag. 
	How about the message "Ready for content"?

	CAREFUL: In the command above (git tag -a v1.0) the -a flag is used. 
	This flag tells Git to create an annotated flag. If you don't provide the flag 
	(i.e. git tag v1.0) then it'll create what's called a lightweight tag.

	Annotated tags are recommended because they include a lot of extra information such as:
	the person who made the tag, the date the tag was made, a message for the tag
	Because of this, you should always use annotated tags.

	After saving and quitting the editor, nothing is displayed on the command line. 
	So how do we know that a tag was actually added to the project? If you type 
	out just git tag, it will display all tags that are in the repository.

	'git log' - vai mostrar os 'tag' do commit se ele tiver algum
	ex.: commit 6fa5f34790808d9f4dccd0fa8fdbc40760102d6e (HEAD -> master, tag: v1.0)

	A Git tag can be deleted with the -d flag (for delete!) and the name of the tag:
	'git tag -d v1.0'

BRANCH DELETE
	Deleting something can be quite nerve-wracking. Don't worry, though. 
	Git won't let you delete a branch if it has commits on it that aren't on 
	any other branch (meaning the commits are unique to the branch that's about 
	to be deleted). If you created the sidebar branch, added commits to it, and 
	then tried to delete it with the git branch -d sidebar, Git wouldn't let you 
	delete the branch because you can't delete a branch that you're currently on. 
	If you switched to the master branch and tried to delete the sidebar branch, 
	Git also wouldn't let you do that because those new commits on the sidebar branch 
	would be lost! To force deletion, you need to use a 
	capital D flag - 'git branch -D sidebar'.

'GIT COMMIT --AMEND'
	If your Working Directory is clean (meaning there aren't any uncommitted 	
	changes in the repository), then running git commit --amend will let you provide a 
	new commit message. Your code editor will open up and display the original 
	commit message. Just fix a misspelling or completely reword it! Then save it 
	and close the editor to lock in the new commit message.

	-- Add Forgotten files to commit
	Alternatively, git commit --amend will let you include files (or changes to files) 
	you might've forgotten to include. Let's say you've updated the color of all 
	navigation links across your entire website. You committed that change and 
	thought you were done. But then you discovered that a special nav link buried 
	deep on a page doesn't have the new color. You could just make a new commit 
	that updates the color for that one link, but that would have two back-to-back 
	commits that do practically the exact same thing (change link colors).

	Instead, you can amend the last commit (the one that updated the color of all
	of the other links) to include this forgotten one. To do get the forgotten link 
	included, just:
	edit the file(s)
	save the file(s)
	stage the file(s)
	and run git commit --amend
	So you'd make changes to the necessary CSS and/or HTML files to get the 
	forgotten link styled correctly, then you'd save all of the files that were
	modified, then you'd use git add to stage all of the modified files 
	(just as if you were going to make a new commit!), but then you'd run 
	'git commit --amend' to update the most-recent commit instead of creating a new one.

'GIT REVERT ID-COMMIT'
	When you tell Git to revert a specific commit, Git takes the changes that 
	were made in commit and does the exact opposite of them. Let's break that down 
	a bit. If a character is added in commit A, if Git reverts commit A, then Git 
	will make a new commit where that character is deleted. It also works the other 
	way where if a character/line is removed, then reverting that commit will add 
	that content back!

	This command:
	will undo the changes that were made by the provided commit
	creates a new commit to record the change

RELATIVE COMMIT REFERENCES
	You already know that you can reference commits by their SHA, by tags, 
	branches, and the special HEAD pointer. Sometimes that's not enough, though. 
	There will be times when you'll want to reference a commit relative to another 
	commit. For example, there will be times where you'll want to tell Git about 
	the commit that's one before the current commit...or two before the current commit. 
	There are special characters called "Ancestry References" that we can use to tell 
	Git about these relative references. Those characters are:

	^ – indicates the parent commit
	~ – indicates the first parent commit
	Here's how we can refer to previous commits:

	the parent commit – the following indicate the parent commit of the current commit
	HEAD^
	HEAD~
	HEAD~1
	the grandparent commit – the following indicate the grandparent commit of the current commit
	HEAD^^
	HEAD~2
	the great-grandparent commit – the following indicate the great-grandparent commit of the current commit
	HEAD^^^
	HEAD~3
	The main difference between the ^ and the ~ is when a commit is created from a merge. 
	A merge commit has two parents. With a merge commit, the ^ reference is used to 
	indicate the first parent of the commit while ^2 indicates the second parent. 
	The first parent is the branch you were on when you ran git merge while the 
	second parent is the branch that was merged in.

	It's easier if we look at an example. This what my git log currently shows:
	* 9ec05ca (HEAD -> master) Revert "Set page heading to "Quests & Crusades""
	* db7e87a Set page heading to "Quests & Crusades"
	*   796ddb0 Merge branch 'heading-update'
	|\  
	| * 4c9749e (heading-update) Set page heading to "Crusade"
	* | 0c5975a Set page heading to "Quest"
	|/  
	*   1a56a81 Merge branch 'sidebar'
	|\  
	| * f69811c (sidebar) Update sidebar with favorite movie
	| * e6c65a6 Add new sidebar content
	* | e014d91 (footer) Add links to social media
	* | 209752a Improve site heading for SEO
	* | 3772ab1 Set background color for page
	|/  
	* 5bfe5e7 Add starting HTML structure
	* 6fa5f34 Add .gitignore file
	* a879849 Add header to blog
	* 94de470 Initial commit

	Let's look at how we'd refer to some of the previous commits. 
	Since HEAD points to the 9ec05ca commt:
	HEAD^ is the db7e87a commit
	HEAD~1 is also the db7e87a commit
	HEAD^^ is the 796ddb0 commit
	HEAD~2 is also the 796ddb0 commit
	HEAD^^^ is the 0c5975a commit
	HEAD~3 is also the 0c5975a commit
	HEAD^^^2 is the 4c9749e commit (this is the grandparent's (HEAD^^) second parent (^2))

'GIT RESET'
	At first glance, resetting might seem coincidentally close to reverting, 
	but they are actually quite different. Reverting creates a new commit that reverts 
	or undos a previous commit. Resetting, on the other hand, erases commits!

	You've got to be careful with Git's resetting capabilities. This is one of the 
	few commands that lets you erase commits from the repository. If a commit is no 
	longer in the repository, then its content is gone.
	To alleviate the stress a bit, Git does keep track of everything for about 30 days 
	before it completely erases anything. To access this content, you'll need to 
	use the git reflog command. Check out these links for more info:
	https://git-scm.com/docs/git-reflog
	https://www.atlassian.com/git/tutorials/rewriting-history
	http://gitready.com/intermediate/2009/02/09/reflog-your-safety-net.html

	POR EXEMPLO commits: a-b-c-d-e-f-g(master-head)
	se rodarmos:
	'git reset HEAD~1' teremos o mesmo efeito de 'git reset --mixed HEAD~1'
	'git reset --mixed HEAD~1' - o HEAD vai passar a apontar para 'f' e as mudanças 
				que o 'g' fez vão para o Working directory
	'git reset --soft HEAD~1' - o HEAD vai passar a apontar para 'f' e as mudanças 
				que o 'g' fez vão para a Staging Area
	'git reset --hard HEAD~1' - o HEAD vai passar a apontar para 'f' e as mudanças 
				que o 'g' fez vão para o lixo (serão perdidas)
	voce pode rodar o mixed e o soft, e depois refazer o commit (equivalente ao que era
		o commit 'g'), nisso voce pode adicionar mais alguma coisa nesse commit
		mas o ID-commit sera diferente do queera o ID-commit 'g' original
		(nesse caso como é o commit mais recente que está sendo alterado 
		o 'git commit --amend' é mais indicado)
	
	É RECOMENDAVEL criar um branch de backup antes de usar 'git reset', porque por mais
	que ele possa aplicar as ediçoes dos commits no working directory ou na staging area,
	ele está apagando os commits
	portanto é bom rodar um 'git branch backup' antes, se rodarmos o git reset com checkout
	no master entao somente o master terá commits apagados, o branch chamado 'backup' não.

	Mais detalhes em:
	https://git-scm.com/docs/git-reset
	https://git-scm.com/blog
	https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection#Ancestry-References

GIT LOG FILTRO
	'git shortlog' - mostra o autor e seus commits
	'git shortlog -s -n' - mostra o numero de commits de cada autor (-s) e poe em ordem 
				de numero de commits (-n)
	'git log --author="Lucas Rocha"' - exibe apenas os commits do autor "Lucas Rocha"
	'git log --grep=bug' - exibe apenas os commits que contem a palavra 'bug' em sua 
				mensagem ou na descricao do commit

WATCHING A REPOSITORY
	If you're working on a repository quite often, then I'd suggest setting the 
	watch setting to "Watching". This way GitHub will notify you whenever anything 
	happens with the repository like people pushing changes to the repository, 
	new issues being created, or comments being added to existing issues.

FORK REMOTE and ORIGINAL REMOTE
	Vamos supor que enquando estamos trabalhando em nosso fork remote para fazer
	alguma contribuição para o remote original, o orignal recebe varios commits no master.
	Para atualizar o master do nosso fork e do nosso repo local, devemos criar um 2 remote
	pelo git, o remote que se refere ao original remote geralmente é chamado de 'upstream'
	entao rodamos o comando 'git remote add upstream URL-original-remote' assim quando 
	executamos 'git remote -v' veremos o 'origin' e o 'upstream'
	-- Agora basta dar um 'git pull upstream master' (ou git fetch, mas ai teremos que dar 
	um merge depois) para atualizar o master de nosso repo local e 
	depois um 'git push origin master' para atualizar o nosso fork

RENAME REMOTE
	'git remote rename nome-antigo nome-novo' - renomeia um remote chamado nome-antigo para
						o nome nome-novo

JUNTAR VÁRIOS COMMITS EM 1 ('squashing')
	vamos supor que temos os seguintes commits: a-b-c-d-e-f-g(master , head)
	e que os commits e,f,g foram somente correcao de erro de portugues
	então juntar (squash) esses commits em 1 só deixaria o git log mais limpo.
	para fazer isso rodamos 'git rebase -i HEAD~3' para juntar os 3 ultimos commits
	(o comando faz referencia a um quarto commit mas ele nao será incluido na junção)
	Após o comando teremos os seguintes commits a-b-c-d-h(master , head)
	                                                   \e-f-g
	os commits e,f,g ainda existirão mas como nao sao acessiveis por nenhum branch (nesse 
	caso o unico branch é o master), eles serão eventualmente apagados pelo git
	-- se quisermos podemos criar um backup desses commits, para isso basta criar um branch
	(chamado 'backup' por exemplo) antes de rodar o 'git rebase -i HEAD~3'
	nesse caso teriamos inicialmente a-b-c-d-e-f-g(master/head  ,  backup)
	e após a junção (squashing) teriamos a-b-c-d-h (master/head)
	                                \e-f-g (backup)

	'-i' quer dizer que sera de forma iterativa, que é melhor para iniciantes
	-- depois de fazer o squash (sem o backup), se quisermos fazer um push para atualizar um remote
	teremos que fazer um 'git push -f', porque o git vai saber que esse push pode
	apagar commits e se nao tiver o '-f', ele nao vai deixar o push rodar

REBASE COMMANDS
	Let's take another look at the different commands that you can do with git rebase:

	use p or pick – to keep the commit as is
	use r or reword – to keep the commit's content but alter the commit message
	use e or edit – to keep the commit's content but stop before committing so that you can:
			add new content or files
			remove content or files
			alter the content that was going to be committed
	use s or squash – to combine this commit's changes into the previous commit 
			(the commit above it in the list)
	use f or fixup – to combine this commit's change into the previous one 
			but drop the commit message
	use x or exec – to run a shell command
	use d or drop – to delete the commit

QUANDO USAR REBASE - PERIGOS DO REBASE
	As you've seen, the git rebase command is incredibly powerful. It can help you 
	edit commit messages, reorder commits, combine commits, etc. So it truly is a 
	powerhouse of a tool. Now the question becomes "When should you rebase?".

	Whenever you rebase commits, Git will create a new SHA for each commit! This has drastic 
	implications. To Git, the SHA is the identifier for a commit, so a different 
	identifier means it's a different commit, regardless if the content has changed at all.

	So you should not rebase if you have already pushed the commits you want to rebase. 
	If you're collaborating with other developers, then they might already be working 
	with the commits you've pushed. If you then use git rebase to change things around 
	and then force push the commits, then the other developers will now be out of sync 
	with the remote repository. They will have to do some complicated surgery to 
	their Git repository to get their repo back in a working state...and it might not 
	even be possible for them to do that; they might just have to scrap all of their 
	work and start over with your newly-rebased, force-pushed commits.

	mais detalhes sobre git rebase:
	https://git-scm.com/book/en/v2/Git-Branching-Rebasing
	https://git-scm.com/docs/git-rebase
	https://www.atlassian.com/git/tutorials/rewriting-history#git-rebase

FIRST COLLABORATION - PULL REQUEST
	alguns sites tem trabalhos relativamente faceis para quem nunca colaborou
	em um projeto aberto
	https://github.com/search?utf8=%E2%9C%93&q=label%3Afirst-timers-only+is%3Aopen&type=Issues&ref=searchresults
	(search for label:first-timers-only is:open)
	https://blog.kentcdodds.com/first-timers-only-78281ea47455
	http://up-for-grabs.net/#/
	http://www.firsttimersonly.com/
	para ver a pull request de algum usuario do github:
	http://firstpr.me/